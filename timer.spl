alias currentPID S0;
alias currentPCB S1;
alias physicalSP S2;
alias newPCB S3;
alias i S4;
alias newphysicalSP S5;

currentPID = (PTBR - 1024) / 8; // calculating Pid of current running process
currentPCB = READY_LIST + 32 * currentPID;

//Saving current program context into PCB
//-----------------------------------------

[currentPCB + 1] = 1; // Set STATE to READY

[ currentPCB + 2 ] = BP;
[ currentPCB + 3 ] = SP - 1; // Ignore IP pushed by Timer int routine

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); // Adress translation by hand (Bcoz nw in kernel mode)

[ currentPCB + 4 ] = [ physicalSP ]; // Save IP of current process in the PCB from the stack

[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR;

// Saving vals of regs into pcb

  [ currentPCB + 7 ] = R0;
  [ currentPCB + 8 ] = R1;
  [ currentPCB + 9 ] = R2;
  [ currentPCB + 10 ] = R3;
  [ currentPCB + 11 ] = R4;
  [ currentPCB + 12 ] = R5;
  [ currentPCB + 13 ] = R6;    
  [ currentPCB + 14 ] = R7;


// Finding next ready process
//------------------------------------

i = 1;
newPCB = currentPCB;

while( i <= 32 ) do
	newPCB = newPCB + 32;
	
	if(newPCB > 2559) then
		newPCB = 1536;
	endif;
	
	if([newPCB + 1] == 1) then
		break;
	endif;
	
	i = i+1;
			
endwhile;

// setting context values from pcb

BP = [ newPCB + 2 ];
SP = [ newPCB + 3 ];
PTBR = [ newPCB + 5 ];
PTLR = [ newPCB + 6 ];

//set the values of regs from pcb

R0 = [ newPCB + 7 ];
R1 = [ newPCB + 8 ];
R2 = [ newPCB + 9 ];
R3 = [ newPCB + 10 ];
R4 = [ newPCB + 11 ];
R5 = [ newPCB + 12 ];
R6 = [ newPCB + 13 ];
R7 = [ newPCB + 14 ];

SP = SP + 1;

newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack

[ newPCB + 1 ] = 2;

ireturn;
